#!/bin/bash

usage() {
echo -ne "Add colors to a text stream in your terminal.\n\n"\
"$0 -h\n"\
"$0 -t [theme]\n"\
"$0 -l [COLORS_AND_STYLES...]\n"\
"$0 [-rcankRNpo] [-s scale] [-S group_index] [-i group_indexes] [-I group_index] [-u units] [-x awk_expr] [-X awk_expr] [-f awk_func] PATTERN [COLORS_AND_STYLES...] [-- ...]\n\n"\
"PATTERN\n  Regular expression.\n\n"\
"COLORS_AND_STYLES\n"\
"  - A style name\n"\
"  - A color name\n"\
"  - A colormap name\n"\
"  - A number in [0…255]\n"\
"  - 'e' followed by a number in [0…15]\n"\
"  - '#' followed by 3 or 6 hexadecimal values\n"\
"  - 'bg'\n"\
"  - Or a comma-separated list (or '=') of those values.\n\n"\
" -t [theme]  List or apply. (load '\${COLOUT_PREFIX_PATH:-\${0}_}\${theme}')\n\n"\
" -l  (line) Colors each lines.\n\n"\
" -r  (repeat/again) Apply PATTERN until there is no more matching.\n\n"\
" -a  (all) Loop on all PATTERN until there is no more matching.\n\n"\
" -c  (continue) Try PATTERN even if previous ones match.\n\n"\
" -n  (next) Each match passes to the next color.\n\n"\
" -k  (keep) Use the previous color map.\n\n"\
" -R  (no-reset) Do not reset colors.\n\n"\
" -N  (lc-numeric) Use the locale's decimal point character when parsing input data.\n\n"\
" -p  (print) print awk/sed command.\n\n"\
" -o  (optimize) See man awk -o/--optimize.\n\n"\
" -s scale  'min,max' or 'max'. Apply colors linearly between min and max (0,100 by default).\n\n"\
" -S group_index  Use this group to compute the interval value.\n\n"\
" -i group_indexes  Ignore groups (space and comma-separated list).\n\n"\
" -I group_index  Shortcut for '-S group_index -i group_index'.\n\n"\
" -u units  Cuts the color range per unit.\n\n"\
" -x awk_expr  An expression that returns the color index.\n"\
"              'v' the extracted value\n"\
"              'n' the number of color\n"\
"              'u' (only if -u) the unit position (1 is first unit, 0 is an unrecognized unit).\n\n"\
" -X awk_expr  An expression that returns a numeric value between min and max (see '-s scale').\n"\
"              'v' the extracted value\n"\
"              'n' the number of color\n"\
"              'u' (only if -u) the unit position (1 is first unit, 0 is an unrecognized unit).\n\n"\
" -f awk_script  Awk user functions.\n\n"\
" -v awk_script  Awk user variables.\n\n"\
"\n"\
" styles:\n"\
  "  normal,n\n"\
  "  bold,o\n"\
  "  d[im]\n"\
  "  i[talic]\n"\
  "  u[nderline]\n"\
  "  blink,l\n"\
  "  reverse,v\n"\
  "  h[idden]\n\n"\
" named colors (Note: an uppercase character is considered to be bold)\n"\
  "  default,none\n"\
  "  [blac]k\n"\
  "  w[hite]\n"\
  "  r[ed]\n"\
  "  g[reen]\n"\
  "  b[lue]\n"\
  "  y[ellow]\n"\
  "  m[agenta]\n"\
  "  c[yan]\n"\
  "  gray,a\n"\
  "  d[ark_]gray,da\n"\
  "  l[ight_]red,lr\n"\
  "  l[ight_]green,lg\n"\
  "  l[ight_]blue,lb\n"\
  "  l[ight_]yellow,ly\n"\
  "  l[ight_]magenta,lm\n"\
  "  l[ight_]cyan,lc\n\n"\
" colormap ('r:' reverse order):\n"\
  "  [r:]default,Default\n"\
  "  [r:]rainbow\n"\
  "  [r:]Rainbow\n"\
  "  [r:]rainbow2\n"\
  "  [r:]Rainbow2\n"\
  "  [r:]spectrum\n"\
  "  [r:]Spectrum\n"\
  "  [r:]set2\n"\
  "  [r:]tab10\n"\
  "  [r:]brewer\n"\
  "  [r:]excel\n"\
  "  [r:]reds\n"\
  "  [r:]Reds\n"\
  "  [r:]greens\n"\
  "  [r:]Greens\n"\
  "  [r:]blues\n"\
  "  [r:]Blues\n"\
  "  [r:]purples\n"\
  "  [r:]Purples\n"\
  "  [r:]darkpurples\n"\
  "  [r:]navy\n"\
  "  [r:]br\n"\
  "  [r:]br2\n\n"\
" rgb888 color:\n   Decimal triplet: [0-9]+/[0-9]+/[0-9]+ (ex: '123/213/42')\n\n"\
" rgb888 color:\n   Hexadecimal triplet: #[0-9a-fA-F]{6} (ex: '#22fa44')\n\n"\
" rgb444 color:\n   Hexadecimal triplet: #[0-9a-fA-F]{3}, (ex: '#ae3')\n\n"\
" 256 colors:\n   A number in [0…255]\n\n"\
" ANSI/Escape color:\n   'e' followed by a number in [0…15] (ex: e3)\n\n"\
" background prefix:\n   bg=\n\n"\
" example:\n"\
  "  echo abcdefgh | $0 '(..)..(..)' red,bg=#8f10e5,italic bg=yellow,k\n"\
  "  ls -shS ~/Videos | ./colout -Nu KMG -x 'log(v*(1024**(u-1)))*2*n/MAX-n' -v 'MAX=log(15000000)' '[0-9]+\.?,?[0-9]*.' rainbow2\n"\
  "  ls -shS ~/Videos | $0 -Ns 1000 -u KMG '[0-9]+\.?,?[0-9]*.' rainbow\n"\
  "  ls -l | $0 '(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)' B {r,g,y},{,i,o}\n"\
  "  echo \$LS_COLORS | $0 -r '([^=]+)=([^:]+:)'\n"\
  "  echo \$PATH | $0 -rn '([^:]+):'\n"\
  "  env | ./colout '^([^=]+)=([^:]+)$|^([^=]+)=' y g y -- -cr '^([^=]+)=([^:]+):?' -- -c '.*' b\n"\
  "  echo 'Progress [########################] 100%' | $0 -rn '#' hidden,bg=Rainbow\n"\
  "  ls -l | $0 -t perm\n"\
>&2
}

prefix_theme_path() {
  echo "${COLOUT_PREFIX_PATH:-$(readlink -f "$0")_}"
}

print_mode=0
all_mode=0

check_int() {
  if [[ ! "$1" =~ ^[0-9]+$ ]] ; then
    echo "$2 '$1' bad number format"
    exit 1
  fi
}

parse_cli () {
  line_mode=0
  scale_mode=0
  loop_color_mode=0
  continue_mode=0
  again_mode=0
  keep_color=0
  min_scale=0
  max_scale=100
  units=''
  scale_idx=0
  user_expr=''
  user_scale_expr=''
  awk_user_funcs=''
  awk_user_variables=''
  awk_ignore_matches=''
  esc_reset=' "\x1B[0m"'

  while getopts ':s:u:S:x:X:f:v:i:I:t:hlrcankRNpo' optname
  do
    case "$optname" in
      l) line_mode=1 ;;
      a) all_mode=1 ;;
      r) again_mode=1 ;;
      n) loop_color_mode=1 ;;
      k) keep_color=1 ;;
      R) esc_reset='' ;;
      N) awk_opt+=' -N' ;;
      c) continue_mode=1 ;;
      p) print_mode=1 ;;
      x) user_expr="$OPTARG" ;;
      X) user_scale_expr="$OPTARG" ;;
      f) awk_user_funcs="$OPTARG" ;;
      v) awk_user_variables="$OPTARG" ;;
      i) awk_ignore_matches+=" $OPTARG" ;;
      o) awk_opt+=' -o' ;;
      t) exec "$(prefix_theme_path)$OPTARG" ;;
      S)
        check_int "$OPTARG" "-S"
        scale_idx="$OPTARG"
        scale_mode=1
        ;;
      I)
        awk_ignore_matches+=" $OPTARG"
        check_int "$OPTARG" "-S"
        scale_idx="$OPTARG"
        scale_mode=1
        ;;
      s)
        IFS=',' read min_scale max_scale <<<"$OPTARG"
        if [ -z "$max_scale" ] ; then
          max_scale="$min_scale"
          min_scale=0
        fi
        if [[
          ! "$min_scale" =~ ^[0-9]+$|^[0-9]+.?[0-9]*$|^[0-9]*.?[0-9]+$ ||
          ! "$max_scale" =~ ^[0-9]+$|^[0-9]+.?[0-9]*$|^[0-9]*.?[0-9]+$ ||
          "$max_scale" -lt "$min_scale"
        ]] ; then
          echo "-s $min_scale,$max_scale bad format"
          exit 1
        fi
        scale_mode=1
        ;;
      u) units="$OPTARG" ; scale_mode=1 ;;
      \?) break ;;
      :)
        if [ $OPTARG = t ] ; then
          local prefix=$(prefix_theme_path)
          local len=${#prefix}
          for f in "$prefix"* ; do
            echo ${f:$len}
          done
          exit 0
        fi
        usage
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
      h) usage ; exit 1 ;;
    esac
  done

  if [ $keep_color = 0 ] ; then
    colors=''
    ((++icreg))
  fi
}

parse_cli "$@"
shift $(($OPTIND-1))

#if [ $# = 0 ] && [ $line_mode = 0 ] && [ $scale_mode = 0 ] ; then
if [ $# = 0 ] && [ $line_mode = 0 ] ; then
  usage
  exit 1
fi

if [ $line_mode = 1 ] ; then
  pattern=''
  append(){
    [ ! -z "$pattern" ] && pattern+=';n;'
    pattern+="s/^/\x1b[${1}m/;s/$/\x1b[0m/"
  }
  run(){
    [ -z "$pattern" ] && set_default_colors
    local cmd
    [ $print_mode = 1 ] && cmd='echo' || cmd='exec'
    $cmd sed "$pattern" ;
  }
else
  rgx="$1"
  shift
  icol=0
  icreg=0
  colors=''
  append(){
    colors+="colors$icreg[$icol]=\"$1\";"
    ((++icol))
  }

  awk_script=''
  awk_begin_script=''
  awk_funcs=''
  ireg=0
  s_i_unit='index("'$units'",substr(a[i], length(a[i]),1))'
  add_getdigits=0
  mk_rgx_block() {
    rgx=${rgx//\//\\/}
    [ -z "$colors" ] && set_default_colors

    local rep_start=''
    local rep_stop=''
    if [ $again_mode = 1 ] ; then
      rep_start='do {'
      rep_stop='if (RSTART+RLENGTH == 1) break; $0 = substr($0, RSTART+RLENGTH); } while (match($0, /'"$rgx"'/, a))'
    fi

    local awk_ic_var1=''
    local awk_ic_var2=''
    local awk_pre_i_loop=''

    if [ $icol = 1 ] ; then
      local a_i_color='"\x1B['$s'm" a[i]'$esc_reset
    else
      local a_i_color='"\x1B[" colors'$icreg'['
      if [ ! -z "$user_expr" ] ; then
        local uexpr='{r=int('"$user_expr"')
          return r<0?0:(r>=nb_colors'$icreg'?nb_colors'$icreg'-1:r)}'
        add_getdigits=1
        if [ -z "$units" ] ; then
          a_i_color+='uexpr'$ireg'(getdigits(a[i]), nb_colors'$icreg')'
          awk_funcs+='function uexpr'$ireg'(v,n)'$uexpr
        else
          a_i_color+='uexpr'$ireg'(getdigits(a[i]), '$s_i_unit', nb_colors'$icreg')'
          awk_funcs+='function uexpr'$ireg'(v,u,n)'$uexpr
        fi
      elif [ ! -z "$user_scale_expr" ] ; then
        local v_compute='*nb_colors'$icreg'/(dscale'$ireg'*'${#units}')'
        if [ -z "$units" ] ; then
          a_i_color+='uexpr'$ireg'(a[i])'$v_compute
          awk_funcs+='function uexpr'$ireg'(v){return int('"$user_scale_expr"')}'
        else
          a_i_color+='uexpr'$ireg'(a[i], '$s_i_unit')'$v_compute
          awk_funcs+='function uexpr'$ireg'(v,u){return int('"$user_scale_expr"')}'
        fi
      elif [ ! -z "$units" ] ; then
        local v_compute='*nb_colors'$icreg'/(dscale'$ireg'*'${#units}')'
        a_i_color+='get_icol'$ireg'(a[i]-'$min_scale', '$s_i_unit')'
        awk_funcs+='function get_icol'$ireg'(v,u){
          istart=nb_colors'$icreg'*(u==0?0:u-1)/'${#units}'
          return int(istart+(v'$v_compute'))}'
      elif [ $scale_idx != 0 ] ; then
        add_getdigits=1
        a_i_color+='icol'
        awk_pre_i_loop+='icol=int((getdigits(a['$scale_idx']) - '$min_scale')*nb_colors'$icreg'/dscale'$ireg')'
      elif [ $scale_mode = 1 ] ; then
        add_getdigits=1
        a_i_color+='int((getdigits(a[i]) - '$min_scale')*nb_colors'$icreg'/dscale'$ireg')'
      elif [ $loop_color_mode = 1 ] ; then
        a_i_color+='icol++%nb_colors'$icreg
      else
        a_i_color+='ic%nb_colors'$icreg
        awk_ic_var1='ic=0'
        awk_ic_var2='ic=i-1'
      fi
      a_i_color+='] "m" a[i]'$esc_reset
      if [ $keep_color != 1 ] || [ $ireg = 0 ] ; then
        awk_begin_script+="$colors"' nb_colors'$icreg'='$icol';'
      fi
    fi
    [ $scale_mode = 1 ] && awk_begin_script+="dscale$ireg=$max_scale-$min_scale+1;"

    local filter_i=''
    if [ ! -z "$awk_ignore_matches" ] ; then
      IFS=' ,'; while read l ; do
        check_int "$l" "-i"
        filter_i+='if(i == '$l') continue;'
      done <<<"$awk_ignore_matches"
    fi

    [ $continue_mode = 0 ] && [ $ireg != 0 ] && awk_script+='else '
    awk_script+='
    if (match($0, /'"$rgx"'/, a)) {
      '"$rep_start"'
      n = length(a)/3
      if (n == 1) {
        i = 0
        '"$awk_ic_var1"'
        s = s substr($0, 0, RSTART-1) '"$a_i_color"'
      }
      else {
        c = ""
        p = 1
        '"$awk_pre_i_loop"'
        for (i=1; i<n; ++i) { '"$filter_i"'
          start=a[i,"start"]
          if (start == null) {
            ++n;
            continue
          }
          '"$awk_ic_var1"'
          s = s substr($0, p, start-p) '"$a_i_color"'
          p = start+a[i,"length"]
        }
        s = s substr($0, p, RSTART+RLENGTH-p)
      }
      '"$rep_stop"'
      $0 = substr($0, RLENGTH+RSTART)
    }'
    ((++ireg))
    icol=0
  }

  run() {
    mk_rgx_block
    local pre_awk_script=''
    local post_awk_script=''
    if [ $all_mode = 1 ] ; then
      pre_awk_script='len=length($0); do {'
      post_awk_script='previous_len=len;len=length($0) } while (previous_len != len);'
    fi
    local cmd
    [ $print_mode = 1 ] && cmd='echo' || cmd='exec'
    [ $add_getdigits = 1 ] && awk_funcs+='function getdigits(s) { sub(/[^0-9]*/,"",s); return s}'
    $cmd awk $awk_opt "$awk_funcs $awk_user_funcs"'
      BEGIN { '"$awk_user_variables;$awk_begin_script"' }
      { s="";'"$pre_awk_script $awk_script $post_awk_script"' print s $0 }'
  }
fi


declare -A style_names=(
  # styles

  [fgnormal]=0 [fgbold]=1 [fgdim]=2 [fgitalic]=3 [fgunderline]=4 [fgblink]=5 [fgreverse]=7 [fghidden]=8
  [fgn]=0 [fgo]=1 [fgd]=2 [fgi]=3 [fgu]=4 [fgl]=5 [fgv]=7 [fgh]=8

  [bgnormal]=0 [bgbold]=1 [bgdim]=2 [bgitalic]=3 [bgunderline]=4 [bgblink]=5 [bgreverse]=7 [bghidden]=8
  [bgn]=0 [bgo]=1 [bgd]=2 [bgi]=3 [bgu]=4 [bgl]=5 [bgv]=7 [bgh]=8


  # foreground

  [fgdefault]=39 [fgnone]=39

  [fgblack]=30 [fgred]=31 [fggreen]=32 [fgyellow]=33 [fgblue]=34 [fgmagenta]=35 [fgcyan]=36 [fggray]=37
  [fgk]=30 [fgr]=31 [fgg]=32 [fgy]=33 [fgb]=34 [fgm]=35 [fgc]=36 [fga]=37

  [fgdark_gray]=90 [fglight_red]=91 [fglight_green]=92 [fglight_yellow]=93 [fglight_blue]=94 [fglight_magenta]=95 [fglight_cyan]=96 [fgwhite]=97
  [fgdgray]=90 [fglred]=91 [fglgreen]=92 [fglyellow]=93 [fglblue]=94 [fglmagenta]=95 [fglcyan]=96
  [fgda]=90 [fglr]=91 [fglg]=92 [fgly]=93 [fglb]=94 [fglm]=95 [fglc]=96 [fgw]=97

  [fgbgdefault]=39 [fgbgnone]=39

  [fgbgblack]=30 [fgbgred]=31 [fgbggreen]=32 [fgbgyellow]=33 [fgbgblue]=34 [fgbgmagenta]=35 [fgbgcyan]=36 [fgbggray]=37
  [fgbgk]=30 [fgbgr]=31 [fgbgg]=32 [fgbgy]=33 [fgbgb]=34 [fgbgm]=35 [fgbgc]=36 [fgbga]=37

  [fgbgdark_gray]=90 [fgbglight_red]=91 [fgbglight_green]=92 [fgbglight_yellow]=93 [fgbglight_blue]=94 [fgbglight_magenta]=95 [fgbglight_cyan]=96 [fgbgwhite]=97
  [fgbgdgray]=90 [fgbglred]=91 [fgbglgreen]=92 [fgbglyellow]=93 [fgbglblue]=94 [fgbglmagenta]=95 [fgbglcyan]=96
  [fgbgda]=90 [fgbglr]=91 [fgbglg]=92 [fgbgly]=93 [fgbglb]=94 [fgbglm]=95 [fgbglc]=96 [fgbgw]=97

  [fge0]=30 [fge1]=31 [fge2]=32 [fge3]=33 [fge4]=34 [fge5]=35 [fge6]=36 [fge7]=37
  [fge8]=90 [fge9]=91 [fge10]=92 [fge11]=93 [fge12]=94 [fge13]=95 [fge14]=96 [fge15]=97


  # background

  [bgdefault]=49 [bgnone]=49

  [bgblack]=40 [bgred]=41 [bggreen]=42 [bgyellow]=43 [bgblue]=44 [bgmagenta]=45 [bgcyan]=46 [bggray]=47
  [bgk]=40 [bgr]=41 [bgg]=42 [bgy]=43 [bgb]=44 [bgm]=45 [bgc]=46 [bga]=47

  [bgdgray]=100 [bglred]=101 [bglgreen]=102 [bglyellow]=103 [bglblue]=104 [bglmagenta]=105 [bglcyan]=106 [bgwhite]=107
  [bgdark_gray]=100 [bglight_red]=101 [bglight_green]=102 [bglight_yellow]=103 [bglight_blue]=104 [bglight_magenta]=105 [bglight_cyan]=106 [bgwhite]=107
  [bgda]=100 [bglr]=101 [bglg]=102 [bgly]=103 [bglb]=104 [bglm]=105 [bglc]=106 [bgw]=107

  [bgbgdefault]=49 [bgbgnone]=49

  [bgbgblack]=40 [bgbgred]=41 [bgbggreen]=42 [bgbgyellow]=43 [bgbgblue]=44 [bgbgmagenta]=45 [bgbgcyan]=46 [bgbggray]=47
  [bgbgk]=40 [bgbgr]=41 [bgbgg]=42 [bgbgy]=43 [bgbgb]=44 [bgbgm]=45 [bgbgc]=46 [bgbga]=47

  [bgbgdgray]=100 [bgbglred]=101 [bgbglgreen]=102 [bgbglyellow]=103 [bgbglblue]=104 [bgbglmagenta]=105 [bgbglcyan]=106 [bgbgwhite]=107
  [bgbgdark_gray]=100 [bgbglight_red]=101 [bgbglight_green]=102 [bgbglight_yellow]=103 [bgbglight_blue]=104 [bgbglight_magenta]=105 [bgbglight_cyan]=106 [bgbgwhite]=107
  [bgbgda]=100 [bgbglr]=101 [bgbglg]=102 [bgbgly]=103 [bgbglb]=104 [bgbglm]=105 [bgbglc]=106 [bgbgw]=107

  [bge0]=40 [bge1]=41 [bge2]=42 [bge3]=43 [bge4]=44 [bge5]=45 [bge6]=46 [bge7]=47
  [bge8]=100 [bge9]=101 [bge10]=102 [bge11]=103 [bge12]=104 [bge13]=105 [bge14]=106 [bge15]=107
)

declare -A colormap_cmds=(
  [rainbow]='append_colors_name m b c g y r'
  [Rainbow]='append_colors_256 92 93 57 21 27 33 39 45 51 50 49 48 47 46 82 118 154 190 226 220 214 208 202 196'
  # Cubehelix rainbow
  [rainbow2]='append_colors_rgb 76;110;219 47;150;223 27;190;202 29;222;162 58;241;120 111;246;91 175;239;90 207;203;53 243;160;47 255;119;70 255;86;110 237;67;149 190;60;174'
  [Rainbow2]='append_colors_rgb 101;77;191 89;99;208 76;110;219 61;130;225 47;150;223 35;171;215 27;190;202 25;208;183 29;222;162 40;234;140 58;241;120 82;245;102 111;246;91 143;243;86 175;239;90 189;223;68 207;203;53 226;182;46 243;160;47 255;139;56 255;119;70 255;101;89 255;86;110 254;75;130 237;67;149 216;62;164 190;60;174 163;60;178 135;61;177 109;63;169'
  [spectrum]='append_colors_name m b c w g y r'
  [Spectrum]='append_colors_256 91 92 56 57 21 27 26 32 31 37 36 35 41 40 41 77 83 84 120 121 157 194 231 254 255 231 230 229 228 227 226 220 214 208 202 196'
  [set2]='append_colors_rgb 102;194;165 250;141;98 141;159;202 230;138;195 166;216;83 254;216;47 228;195;148 179;179;179'
  [tab10]='append_colors_rgb 31;119;180 255;127;14 44;160;44 214;39;40 148;103;189 140;86;75 227;119;194 127;127;127 188;189;34 23;190;207'
  [brewer]='append_colors_rgb 166;206;227 31;120;180 178;223;138 51;160;44 251;154;153 227;26;28 253;191;111 255;127;0 202;178;214 106;61;154'
  [excel]='append_colors_rgb 54;94;150 152;51;52 119;151;61 93;67;124 54;134;159 209;112;47 129;151;197 196;127;128 172;196;132 152;135;176'
  [reds]='append_colors_rgb 255;229;229 229;183;183 204;137;137 178;91;91 153;45;45 128;0;0'
  [Reds]='append_colors_rgb 255;193;193 253;189;189 251;186;186 249;182;182 247;179;179 245;175;175 243;171;171 241;168;168 239;164;164 237;161;161 235;157;157 233;153;153 231;150;150 229;146;146 227;143;143 225;139;139 223;135;135 221;132;132 219;128;128 217;125;125 215;121;121 213;117;117 211;114;114 209;110;110 207;107;107'
  [greens]='append_colors_rgb 229;255;229 183;229;183 137;204;137 91;178;91 45;153;45 0;128;0'
  [Greens]='append_colors_rgb 193;255;193 189;253;189 186;251;186 182;249;182 179;247;179 175;245;175 171;243;171 168;241;168 164;239;164 161;237;161 157;235;157 153;233;153 150;231;150 146;229;146 143;227;143 139;225;139 135;223;135 132;221;132 128;219;128 125;217;125 121;215;121 117;213;117 114;211;114 110;209;110 107;207;107'
  [blues]='append_colors_rgb 229;229;255 183;183;229 137;137;204 91;91;178 45;45;153 0;0;128'
  [Blues]='append_colors_rgb 193;193;255 189;189;253 186;186;251 182;182;249 179;179;247 175;175;245 171;171;243 168;168;241 164;164;239 161;161;237 157;157;235 153;153;233 150;150;231 146;146;229 143;143;227 139;139;225 135;135;223 132;132;221 128;128;219 125;125;217 121;121;215 117;117;213 114;114;211 110;110;209 107;107;207'
  [purples]='append_colors_rgb 237;209;203 224;177;180 207;154;163 183;116;149 154;91;136 118;68;118'
  [Purples]='append_colors_rgb 237;209;203 234;200;196 230;190;188 227;181;183 223;172;177 218;162;172 212;153;167 207;144;162 200;135;158 194;127;154 187;119;151 178;111;147 169;103;143 161;96;139 150;88;134'
  [darkpurples]='append_colors_rgb 109;79;114 90;68;94 71;56;74 52;45;54 34;34;34'
  [navy]='append_colors_rgb 235;247;249 187;229;254 160;211;219 123;193;204 85;175;189 48;157;174'
  [br]='append_colors_rgb 63;127;147 129;167;181 184;209;217 242;242;242 232;192;181 213;138;118 194;85;57'
  [br2]='append_colors_rgb 41;113;177 107;172;208 194;221;255 247;246;246 250;204;180 228;128;101 185;39;50'
  [default]='append_colors 31 32 33 34 35 36 37'
  [Default]='append_colors 31 32 33 34 35 36 37'
)

cmd='38'
prefix='fg'

append_colors_name() {
  while [ $# != 1 ] ; do
    append "$s;${style_names[$prefix$1]}"
    shift
  done
  s+=";${style_names[$prefix$1]}"
}
append_colors() {
  local scmd="$s;$cmd;"
  while [ $# != 1 ] ; do
    append "$scmd$1"
    shift
  done
  s+=";$cmd;$1"
}
append_colors_256() {
  cmd+=';5'
  append_colors "$@"
  cmd=${cmd:0:-2}
}
append_colors_rgb() {
  cmd+=';2'
  append_colors "$@"
  cmd=${cmd:0:-2}
}
set_default_colors() {
  append_colors {31..37}
  append "$s"
}
invalid_style() {
  echo "Invalid '$style' color." >&2
  exit 5
}

while [ $# != 0 ] ; do
  # re-parse: "-- [-rg] [--] PATTERN [COLORS_AND_STYLES...]]..."
  if [ "$1" = '--' ] ; then
    if [ $line_mode = 1 ] ; then
      usage
      exit 5
    fi
    shift
    mk_rgx_block

    OPTIND=1
    parse_cli "$@"
    shift $(($OPTIND-1))

    if [ $# = 0 ] || [ $line_mode = 1 ] ; then
      usage
      exit 1
    fi

    rgx="$1"
    shift
    continue
  fi

  # note: "bg,red" is equivalent to "bg=red"
  IFS=',=' read -a styles <<<"$1"
  s=''
  for style in "${styles[@]}" ; do
    # background selector
    if [ bg = "$style" ] ; then
      cmd='48'
      prefix='bg'
    else
      v=${style_names[$prefix$style]}
      if [ -z "$v" ] ; then
        v2=${style_names[$prefix${style,,}]}
        # Bold and color
        if [ ! -z "$v2" ] ; then
          s+=";$v2;1"
        # rgb888 hexadecimal color (#ffffff)
        elif [[ "$style" =~ ^'#'[0-9a-fA-F]{6}$ ]] ; then
          rgb=$((16#${style:1}))
          s+=";$cmd;2;$(($rgb>>16));$((($rgb>>8)&0xff));$(($rgb&0xff))"
        # rgb444 hexadecimal color (#fff)
        elif [[ "$style" =~ ^'#'[0-9a-fA-F]{3}$ ]] ; then
          rgb=$((16#${style:1}))
          s+=";$cmd;2;$((($rgb>>8)*16));$(((($rgb>>4)&0xf)*16));$((($rgb&0xf)*16))"
        # 256 colors
        elif [[ "$style" =~ ^'25'[0-5]$|^[0-2][0-4][0-9]$|^[0-9][0-9]$ ]] ; then
          s+=";$cmd;5;${style:1}"
        # rgb888 decimal color (123/123/123)
        elif [[ "$style" =~ ^[0-9]+'/'[0-9]+'/'[0-9]+$ ]] ; then
          s+=";$cmd;2;${style//\//;}"
        else
          mapcmd=${colormap_cmds[$style]}
          if [ ! "$mapcmd" ] ; then
            if [ "${style:0:2}" = 'r:' ]; then
              mapcmd=${colormap_cmds[${style:2}]}
              [ ! "$mapcmd" ] && invalid_style

              # reverse order colormap
              read ff comps <<<"$mapcmd"
              mapcmd=''
              for comp in $comps ; do
                mapcmd="$comp $mapcmd"
              done
              mapcmd="$ff $mapcmd"
            else
              invalid_style
            fi
          fi

          $mapcmd
        fi
      else
        s+=";$v"
      fi
      cmd='38'
      prefix='fg'
    fi
  done
  append "$s"
  shift
done

run
