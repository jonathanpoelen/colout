#!/usr/bin/awk  -OSf
# colout '-po' '^(==[0-9]+==\s{1})(Memcheck|Copyright|Using|Rerun|Use --)(.*)$' 'b' '--' '^(==[0-9]+==\s{1})(Warning)(.*)$' 'm' '--' '^(==[0-9]+==\s{1}Command: )(\S*).*$' 'g' 'W' '--' '^(==[0-9]+==\s{1})(HEAP SUMMARY:|All heap blocks were freed)(.*)$' 'g' '--' '^(==[0-9]+==\s{1}\S+.*)$' 'r' '--' '^==[0-9]+==\s{2}(\S+.*)$' 'y' '--' '^==[0-9]+==\s{4}([atby]{2}) (0x0): (\?{3})' 'b' 'y' 'R' '--' '^==[0-9]+==\s{4}([atby]{2}) (0x)([^:]*:) \S+' 'b' '--' '\(in (.*)\)' 'c' '--' '^==[0-9]+==\s{4}(definitely lost): .* (in) .*' 'R' '--' '^==[0-9]+==\s{4}(indirectly lost): .* (in) .*' 'Y' '--' '^==[0-9]+==\s{6}(possibly lost): .* (in) .*' 'Y' '--' '^==[0-9]+==\s{4}(still reachable): .* (in) .*' 'G' '--' '^==[0-9]+==\s{9}(suppressed): .* (in) .*' 'C' '--' '-c' ' \(([^()\.]*\.[^:]+):([0-9]+)\)$' 'W' 'y'

# created ven. mai 10 10:39:12 2019

# gawk profile, created Fri May 10 10:39:12 2019

# BEGIN rule(s)

BEGIN {
esc_reset = "\033[0m"
colors2[0] = ";32"
colors2[1] = ";97;1"
nb_colors2 = 2
colors6[0] = ";34"
colors6[1] = ";33"
colors6[2] = ";31;1"
nb_colors6 = 3
colors14[0] = ";97;1"
colors14[1] = ";33"
nb_colors14 = 2
}

# Rule(s)

{
s = ""
if (match($0, /^(==[0-9]+==\s{1})(Memcheck|Copyright|Using|Rerun|Use --)(.*)$/, a)) {
	c = ";34"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^(==[0-9]+==\s{1})(Warning)(.*)$/, a)) {
	c = ";35"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^(==[0-9]+==\s{1}Command: )(\S*).*$/, a)) {
	n = length(a) / 3
	if (n == 1) {
		i = 0
		ic = 0
		s = s substr($0, 0, RSTART - 1) "\033[" colors2[ic % nb_colors2] "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			ic = i - 1
			s = s substr($0, p, start - p) "\033[" colors2[ic % nb_colors2] "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^(==[0-9]+==\s{1})(HEAP SUMMARY:|All heap blocks were freed)(.*)$/, a)) {
	c = ";32"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^(==[0-9]+==\s{1}\S+.*)$/, a)) {
	c = ";31"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{2}(\S+.*)$/, a)) {
	c = ";33"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{4}([atby]{2}) (0x0): (\?{3})/, a)) {
	n = length(a) / 3
	if (n == 1) {
		i = 0
		ic = 0
		s = s substr($0, 0, RSTART - 1) "\033[" colors6[ic % nb_colors6] "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			ic = i - 1
			s = s substr($0, p, start - p) "\033[" colors6[ic % nb_colors6] "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{4}([atby]{2}) (0x)([^:]*:) \S+/, a)) {
	c = ";34"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /\(in (.*)\)/, a)) {
	c = ";36"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{4}(definitely lost): .* (in) .*/, a)) {
	c = ";31;1"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{4}(indirectly lost): .* (in) .*/, a)) {
	c = ";33;1"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{6}(possibly lost): .* (in) .*/, a)) {
	c = ";33;1"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{4}(still reachable): .* (in) .*/, a)) {
	c = ";32;1"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
} else if (match($0, /^==[0-9]+==\s{9}(suppressed): .* (in) .*/, a)) {
	c = ";36;1"
	n = length(a) / 3
	if (n == 1) {
		i = 0
		s = s substr($0, 0, RSTART - 1) "\033[" c "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			s = s substr($0, p, start - p) "\033[" c "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
}
if (match($0, / \(([^()\.]*\.[^:]+):([0-9]+)\)$/, a)) {
	n = length(a) / 3
	if (n == 1) {
		i = 0
		ic = 0
		s = s substr($0, 0, RSTART - 1) "\033[" colors14[ic % nb_colors14] "m" a[i] esc_reset
	} else {
		p = 1
		for (i = 1; i < n; ++i) {
			start = a[i, "start"]
			if (start == null) {
				++n
				continue
			}
			ic = i - 1
			s = s substr($0, p, start - p) "\033[" colors14[ic % nb_colors14] "m" a[i] esc_reset
			p = start + a[i, "length"]
		}
		s = s substr($0, p, RSTART + RLENGTH - p)
	}
	$0 = substr($0, RLENGTH + RSTART)
}
print s $0
}

