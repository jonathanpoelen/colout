include modules/bjam-conf/jam/cxxflags.jam ;

constant ROOT_TEST_DIR : test ;
constant ROOT_SRC_DIR : src ;
constant COLOUT_SRC : src/colout ;

rule includes ( property * )
{
  return
    <include>modules/falcon.cxx/include
    <include>modules/variant/include
    <include>$(ROOT_SRC_DIR)
  ;
}

rule defines ( property * )
{
}


project colout
: requirements

  <conditional>@includes
  <conditional>@defines
  <conditional>@flags

  <cxxflags>-std=c++14
  <cxxflags>-fno-rtti
  #<cxxflags>-frtti

: default-build release
;


import path ;


exe colout : colout.cpp [ path.glob-tree $(COLOUT_SRC) : *.cpp ] ;


#
# Unit Tests
#
import testing ;

# import toolset ;
# import feature : feature ;

lib libboost_unit_tests :
  $(ROOT_TEST_DIR)/boost_unit_tests.cpp
:
  <define>BOOST_TEST_DYN_LINK
  <cxxflags>-frtti
  <cxxflags>-fno-sanitize=address
  <link>shared
;

constant TEST_DEPENDENCIES :
  <library>libboost_unit_tests
  <include>$(ROOT_TEST_DIR)
  <cxxflags>-frtti
  <define>BOOST_AUTO_TEST_MAIN
  <define>BOOST_TEST_DYN_LINK
;

rule test-run ( target : sources + : requirements * )
{
  sources = $(ROOT_TEST_DIR)/$(sources) ;
  unit-test $(target) : $(sources) : $(requirements) $(TEST_DEPENDENCIES) ;
}

rule test-canonical ( test : sources * : requirements * )
{
  local target = test_$(test:B) ;
  local test = $(ROOT_TEST_DIR)/$(test:B)_test.cpp ;
  local sources = [ glob $(COLOUT_SRC)/$(test) ] $(sources) ;
  unit-test $(target) : $(test) $(sources) : $(requirements) $(TEST_DEPENDENCIES) ;
}

for local src in [ path.glob-tree $(COLOUT_SRC) : *.cpp ]
{
  obj $(src:B).o : $(src) ;
}

# obj palette.o : src/colout/palette.cpp ;
# obj parse_colors.o : src/colout/cli/parse_colors.cpp ;
# obj parse_cli.o : src/colout/cli/parse_cli.cpp ;

alias parser.o : parse_cli.o parse_colors.o ;

test-canonical color.cpp ;
test-canonical parse_colors.cpp : parser.o palette.o ;
